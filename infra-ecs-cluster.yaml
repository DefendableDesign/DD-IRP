Description: >
    This template deploys an ECS cluster to the provided VPC and subnets using
    an Auto Scaling Group
Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
    InstanceType:
        Description: Which instance type should we use to build the ECS cluster?
        Type: String
    ClusterSize:
        Description: How many ECS hosts do you want to initially deploy?
        Type: Number
    VPC:
        Description: Choose which VPC this ECS cluster should be deployed to
        Type: 'AWS::EC2::VPC::Id'
    Subnets:
        Description: Choose which subnets this ECS cluster should be deployed to
        Type: 'List<AWS::EC2::Subnet::Id>'
    SecurityGroup:
        Description: Select the Security Group to use for the ECS cluster hosts
        Type: 'AWS::EC2::SecurityGroup::Id'
Mappings:
    AWSRegionToAMI:
        us-east-2:
            AMI: ami-1b90a67e
        us-east-1:
            AMI: ami-cb17d8b6
        us-west-2:
            AMI: ami-05b5277d
        us-west-1:
            AMI: ami-9cbbaffc
        eu-west-3:
            AMI: ami-914afcec
        eu-west-2:
            AMI: ami-a48d6bc3
        eu-west-1:
            AMI: ami-bfb5fec6
        eu-central-1:
            AMI: ami-ac055447
        ap-northeast-2:
            AMI: ami-ba74d8d4
        ap-northeast-1:
            AMI: ami-5add893c
        ap-southeast-2:
            AMI: ami-4cc5072e
        ap-southeast-1:
            AMI: ami-acbcefd0
        ca-central-1:
            AMI: ami-a535b2c1
        ap-south-1:
            AMI: ami-2149114e
        sa-east-1:
            AMI: ami-d3bce9bf
Resources:
    ECSCluster:
        Type: 'AWS::ECS::Cluster'
        Properties:
            ClusterName:
                Ref: EnvironmentName
    ECSAutoScalingGroup:
        Type: 'AWS::AutoScaling::AutoScalingGroup'
        Properties:
            VPCZoneIdentifier:
                Ref: Subnets
            LaunchConfigurationName:
                Ref: ECSLaunchConfiguration
            MinSize:
                Ref: ClusterSize
            MaxSize: 10
            DesiredCapacity:
                Ref: ClusterSize
            Tags:
                -
                    Key: Name
                    Value:
                        Fn::Sub: '${EnvironmentName} ECS host'
                    PropagateAtLaunch: true
                -
                    Key: ElasticSearch
                    Value: esnode
                    PropagateAtLaunch: true
        CreationPolicy:
            ResourceSignal:
                Timeout: PT15M
        UpdatePolicy:
            AutoScalingRollingUpdate:
                MinInstancesInService: 1
                MaxBatchSize: 1
                PauseTime: PT30M
                SuspendProcesses:
                    - HealthCheck
                    - ReplaceUnhealthy
                    - AZRebalance
                    - AlarmNotification
                    - ScheduledActions
                WaitOnResourceSignals: true
    ECSLaunchConfiguration:
        Type: 'AWS::AutoScaling::LaunchConfiguration'
        Properties:
            ImageId:
                Fn::FindInMap:
                    - AWSRegionToAMI
                    -
                        Ref: 'AWS::Region'
                    - AMI
            InstanceType:
                Ref: InstanceType
            SecurityGroups:
                -
                    Ref: SecurityGroup
            IamInstanceProfile:
                Ref: ECSInstanceProfile
            UserData:
                Fn::Base64:
                    Fn::Sub: |
                        #!/bin/bash
                        exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
                        yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
                        yum install -y aws-cfn-bootstrap hibagent
                        /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
                        /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup
                        /usr/bin/enable-ec2-spot-hibernation
            BlockDeviceMappings:
                -
                    DeviceName: /dev/sdf
                    Ebs:
                        DeleteOnTermination: "true"
                        VolumeSize: "30"
                        VolumeType: "gp2"
        Metadata:
            'AWS::CloudFormation::Init':
                config:
                    packages:
                        yum:
                            awslogs: []
                    commands:
                        01_add_instance_to_cluster:
                            command:
                                Fn::Sub: >-
                                    echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
                        02_set_max_map_count:
                            command: sysctl -w vm.max_map_count=262144
                        03_create_mount_point:
                            command: mkdir -p /usr/share/elasticsearch/data/
                        04_initialise_data_volume:
                            command: mkfs -t ext4 /dev/sdf
                        05_mount_data_volume:
                            command: mount /dev/sdf /usr/share/elasticsearch/data/
                        06_automount_data_volume:
                            command: echo "/dev/sdf /usr/share/elasticsearch/data/ ext4 defaults,nofail 0 2" >> /etc/fstab
                        07_set_mount_point_ownership:
                            command: chown -R 1000.1000 /usr/share/elasticsearch/data/
                        09_set_mount_point_permissions:
                            command: chmod -R 0760 /usr/share/elasticsearch/data/
                    files:
                        /etc/cfn/cfn-hup.conf:
                            mode: 256
                            owner: root
                            group: root
                            content:
                                Fn::Sub: |
                                    [main]
                                    stack=${AWS::StackId}
                                    region=${AWS::Region}
                        /etc/cfn/hooks.d/cfn-auto-reloader.conf:
                            content:
                                Fn::Sub: |
                                    [cfn-auto-reloader-hook]
                                    triggers=post.update
                                    path=Resources.ECSLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                                    action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
                        /etc/awslogs/awscli.conf:
                            content:
                                Fn::Sub: |
                                    [plugins]
                                    cwlogs = cwlogs
                                    [default]
                                    region = ${AWS::Region}
                        /etc/awslogs/awslogs.conf:
                            content:
                                Fn::Sub: |
                                    [general]
                                    state_file = /var/lib/awslogs/agent-state

                                    [/var/log/dmesg]
                                    file = /var/log/dmesg
                                    log_group_name = ${ECSCluster}-/var/log/dmesg
                                    log_stream_name = ${ECSCluster}

                                    [/var/log/messages]
                                    file = /var/log/messages
                                    log_group_name = ${ECSCluster}-/var/log/messages
                                    log_stream_name = ${ECSCluster}
                                    datetime_format = %b %d %H:%M:%S

                                    [/var/log/docker]
                                    file = /var/log/docker
                                    log_group_name = ${ECSCluster}-/var/log/docker
                                    log_stream_name = ${ECSCluster}
                                    datetime_format = %Y-%m-%dT%H:%M:%S.%f

                                    [/var/log/ecs/ecs-init.log]
                                    file = /var/log/ecs/ecs-init.log.*
                                    log_group_name = ${ECSCluster}-/var/log/ecs/ecs-init.log
                                    log_stream_name = ${ECSCluster}
                                    datetime_format = %Y-%m-%dT%H:%M:%SZ

                                    [/var/log/ecs/ecs-agent.log]
                                    file = /var/log/ecs/ecs-agent.log.*
                                    log_group_name = ${ECSCluster}-/var/log/ecs/ecs-agent.log
                                    log_stream_name = ${ECSCluster}
                                    datetime_format = %Y-%m-%dT%H:%M:%SZ

                                    [/var/log/ecs/audit.log]
                                    file = /var/log/ecs/audit.log.*
                                    log_group_name = ${ECSCluster}-/var/log/ecs/audit.log
                                    log_stream_name = ${ECSCluster}
                                    datetime_format = %Y-%m-%dT%H:%M:%SZ
                    services:
                        sysvinit:
                            cfn-hup:
                                enabled: true
                                ensureRunning: true
                                files:
                                    - /etc/cfn/cfn-hup.conf
                                    - /etc/cfn/hooks.d/cfn-auto-reloader.conf
                            awslogs:
                                enabled: true
                                ensureRunning: true
                                files:
                                    - /etc/awslogs/awslogs.conf
                                    - /etc/awslogs/awscli.conf
    ECSRole:
        Type: 'AWS::IAM::Role'
        Properties:
            Path: /
            RoleName:
                Fn::Sub: '${EnvironmentName}-ECSRole-${AWS::Region}'
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "ec2.amazonaws.com"
                        }
                    }]
                }
            Policies:
                -
                    PolicyName: ecs-service
                    PolicyDocument: |
                        {
                            "Statement": [{
                                "Effect": "Allow",
                                "Action": [
                                    "ec2:DescribeInstances",
                                    "ecs:CreateCluster",
                                    "ecs:DeregisterContainerInstance",
                                    "ecs:DiscoverPollEndpoint",
                                    "ecs:Poll",
                                    "ecs:RegisterContainerInstance",
                                    "ecs:StartTelemetrySession",
                                    "ecs:Submit*",
                                    "logs:CreateLogStream",
                                    "logs:PutLogEvents",
                                    "ecr:BatchCheckLayerAvailability",
                                    "ecr:BatchGetImage",
                                    "ecr:GetDownloadUrlForLayer",
                                    "ecr:GetAuthorizationToken",
                                    "ssm:DescribeAssociation",
                                    "ssm:GetDeployablePatchSnapshotForInstance",
                                    "ssm:GetDocument",
                                    "ssm:GetManifest",
                                    "ssm:GetParameters",
                                    "ssm:ListAssociations",
                                    "ssm:ListInstanceAssociations",
                                    "ssm:PutInventory",
                                    "ssm:PutComplianceItems",
                                    "ssm:PutConfigurePackageResult",
                                    "ssm:UpdateAssociationStatus",
                                    "ssm:UpdateInstanceAssociationStatus",
                                    "ssm:UpdateInstanceInformation",
                                    "ec2messages:AcknowledgeMessage",
                                    "ec2messages:DeleteMessage",
                                    "ec2messages:FailMessage",
                                    "ec2messages:GetEndpoint",
                                    "ec2messages:GetMessages",
                                    "ec2messages:SendReply",
                                    "cloudwatch:PutMetricData",
                                    "ec2:DescribeInstanceStatus",
                                    "ds:CreateComputer",
                                    "ds:DescribeDirectories",
                                    "logs:CreateLogGroup",
                                    "logs:CreateLogStream",
                                    "logs:DescribeLogGroups",
                                    "logs:DescribeLogStreams",
                                    "logs:PutLogEvents"
                                ],
                                "Resource": "*"
                            }]
                        }
    ECSInstanceProfile:
        Type: 'AWS::IAM::InstanceProfile'
        Properties:
            Path: /
            Roles:
                -
                    Ref: ECSRole
    ECSServiceAutoScalingRole:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    Action:
                        - 'sts:AssumeRole'
                    Effect: Allow
                    Principal:
                        Service:
                            - application-autoscaling.amazonaws.com
            Path: /
            Policies:
                -
                    PolicyName: ecs-service-autoscaling
                    PolicyDocument:
                        Statement:
                            Effect: Allow
                            Action:
                                - 'application-autoscaling:*'
                                - 'cloudwatch:DescribeAlarms'
                                - 'cloudwatch:PutMetricAlarm'
                                - 'ecs:DescribeServices'
                                - 'ecs:UpdateService'
                            Resource: '*'
Outputs:
    Cluster:
        Description: A reference to the ECS cluster
        Value:
            Ref: ECSCluster
    ECSServiceAutoScalingRole:
        Description: A reference to ECS service auto scaling role
        Value:
            Fn::GetAtt:
                - ECSServiceAutoScalingRole
                - Arn
    ECSAutoScalingGroupName:
        Description: A reference to ECS AutoScaling Group Name
        Value:
            Ref: ECSAutoScalingGroup
